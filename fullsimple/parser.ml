type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | AS of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | NAT of (Support.Error.info)
  | ISMEMBER of (Support.Error.info)
  | INTERSECTION of (Support.Error.info)
  | INSERT of (Support.Error.info)
  | SET of (Support.Error.info)
  | NIL of (Support.Error.info)
  | SETTYPE of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 82 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* IF *);
  260 (* THEN *);
  261 (* ELSE *);
  262 (* TRUE *);
  263 (* FALSE *);
  264 (* BOOL *);
  265 (* CASE *);
  266 (* OF *);
  267 (* AS *);
  268 (* LAMBDA *);
  269 (* LET *);
  270 (* IN *);
  271 (* FIX *);
  272 (* LETREC *);
  273 (* USTRING *);
  274 (* UNIT *);
  275 (* UUNIT *);
  276 (* TIMESFLOAT *);
  277 (* UFLOAT *);
  278 (* SUCC *);
  279 (* PRED *);
  280 (* ISZERO *);
  281 (* NAT *);
  282 (* ISMEMBER *);
  283 (* INTERSECTION *);
  284 (* INSERT *);
  285 (* SET *);
  286 (* NIL *);
  287 (* SETTYPE *);
  288 (* UCID *);
  289 (* LCID *);
  290 (* INTV *);
  291 (* FLOATV *);
  292 (* STRINGV *);
  293 (* APOSTROPHE *);
  294 (* DQUOTE *);
  295 (* ARROW *);
  296 (* BANG *);
  297 (* BARGT *);
  298 (* BARRCURLY *);
  299 (* BARRSQUARE *);
  300 (* COLON *);
  301 (* COLONCOLON *);
  302 (* COLONEQ *);
  303 (* COLONHASH *);
  304 (* COMMA *);
  305 (* DARROW *);
  306 (* DDARROW *);
  307 (* DOT *);
    0 (* EOF *);
  308 (* EQ *);
  309 (* EQEQ *);
  310 (* EXISTS *);
  311 (* GT *);
  312 (* HASH *);
  313 (* LCURLY *);
  314 (* LCURLYBAR *);
  315 (* LEFTARROW *);
  316 (* LPAREN *);
  317 (* LSQUARE *);
  318 (* LSQUAREBAR *);
  319 (* LT *);
  320 (* RCURLY *);
  321 (* RPAREN *);
  322 (* RSQUARE *);
  323 (* SEMI *);
  324 (* SLASH *);
  325 (* STAR *);
  326 (* TRIANGLE *);
  327 (* USCORE *);
  328 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\005\000\005\000\006\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\004\000\004\000\009\000\009\000\010\000\010\000\
\011\000\011\000\007\000\007\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\015\000\
\015\000\014\000\014\000\014\000\017\000\017\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\013\000\013\000\019\000\018\000\018\000\020\000\
\020\000\021\000\021\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\002\000\002\000\001\000\
\003\000\001\000\001\000\003\000\001\000\001\000\003\000\001\000\
\001\000\001\000\000\000\002\000\000\000\001\000\001\000\003\000\
\003\000\001\000\003\000\001\000\001\000\006\000\006\000\006\000\
\006\000\006\000\004\000\006\000\006\000\006\000\006\000\008\000\
\001\000\002\000\002\000\003\000\002\000\002\000\002\000\003\000\
\001\000\003\000\003\000\001\000\001\000\003\000\003\000\004\000\
\001\000\001\000\001\000\007\000\001\000\001\000\001\000\003\000\
\001\000\001\000\001\000\003\000\007\000\000\000\001\000\001\000\
\003\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\057\000\058\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000\000\000\066\000\
\065\000\062\000\001\000\000\000\000\000\000\000\076\000\000\000\
\003\000\000\000\000\000\052\000\000\000\000\000\061\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\005\000\000\000\075\000\000\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\013\000\014\000\016\000\017\000\018\000\010\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\006\000\007\000\000\000\064\000\000\000\000\000\
\055\000\000\000\002\000\050\000\051\000\048\000\000\000\026\000\
\000\000\022\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\074\000\073\000\054\000\000\000\
\000\000\015\000\000\000\009\000\012\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\024\000\030\000\000\000\068\000\
\036\000\037\000\038\000\039\000\000\000\032\000\033\000\034\000\
\031\000\000\000\000\000\000\000\060\000\000\000\040\000\000\000\
\000\000"

let yydgoto = "\002\000\
\031\000\032\000\033\000\057\000\060\000\112\000\084\000\085\000\
\113\000\114\000\115\000\034\000\122\000\035\000\036\000\037\000\
\067\000\063\000\123\000\064\000\065\000"

let yysindex = "\011\000\
\001\000\000\000\212\254\148\001\000\000\000\000\148\001\238\254\
\241\254\020\002\242\254\000\000\020\002\020\002\020\002\020\002\
\217\254\219\254\224\254\230\254\000\000\239\254\226\254\000\000\
\000\000\000\000\000\000\194\001\148\001\003\255\000\000\228\254\
\000\000\020\002\246\254\000\000\026\255\073\002\000\000\040\255\
\035\255\002\255\013\255\251\254\010\255\246\254\014\255\001\002\
\246\254\246\254\246\254\148\001\148\001\148\001\148\001\073\002\
\000\000\073\002\148\001\000\000\012\255\000\000\001\255\000\000\
\018\255\000\255\004\255\016\255\001\000\246\254\253\254\073\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\002\
\073\002\054\002\008\255\000\000\033\255\148\001\017\255\073\002\
\073\002\148\001\148\001\073\002\246\254\027\255\029\255\031\255\
\036\255\000\000\000\000\000\000\148\001\000\000\194\001\148\001\
\000\000\148\001\000\000\000\000\000\000\000\000\037\255\000\000\
\021\255\000\000\041\255\023\255\039\255\000\000\073\002\085\255\
\058\255\000\000\024\255\047\255\056\255\097\255\098\255\062\255\
\148\001\148\001\148\001\148\001\000\000\000\000\000\000\060\255\
\073\002\000\000\054\002\000\000\000\000\000\000\148\001\064\255\
\017\255\148\001\148\001\148\001\148\001\148\001\053\255\054\255\
\055\255\057\255\110\255\000\000\000\000\000\000\090\255\000\000\
\000\000\000\000\000\000\000\000\116\255\000\000\000\000\000\000\
\000\000\073\002\069\255\148\001\000\000\081\255\000\000\238\001\
\020\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\070\255\211\255\000\000\
\000\000\000\000\000\000\072\255\000\000\000\000\000\000\000\000\
\000\000\028\255\036\000\000\000\168\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\076\000\000\000\000\000\
\116\000\156\000\196\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\089\001\000\000\000\000\000\000\
\074\255\075\255\000\000\000\000\000\000\236\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\255\
\000\000\094\255\000\000\000\000\099\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\205\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\255"

let yygindex = "\000\000\
\083\000\000\000\252\255\000\000\000\000\227\255\034\000\000\000\
\073\000\018\000\000\000\238\255\015\000\248\255\000\000\000\000\
\057\000\000\000\000\000\064\000\000\000"

let yytablesize = 904
let yytable = "\040\000\
\027\000\046\000\041\000\023\000\048\000\049\000\050\000\051\000\
\083\000\069\000\069\000\001\000\023\000\058\000\042\000\069\000\
\038\000\044\000\047\000\069\000\052\000\059\000\053\000\062\000\
\066\000\070\000\098\000\054\000\099\000\108\000\109\000\029\000\
\029\000\055\000\056\000\068\000\072\000\029\000\069\000\093\000\
\071\000\029\000\110\000\086\000\087\000\088\000\090\000\094\000\
\095\000\096\000\097\000\116\000\043\000\069\000\100\000\045\000\
\089\000\092\000\124\000\125\000\069\000\091\000\128\000\101\000\
\102\000\103\000\104\000\106\000\105\000\069\000\069\000\119\000\
\069\000\118\000\129\000\029\000\130\000\069\000\131\000\121\000\
\137\000\120\000\029\000\132\000\138\000\126\000\127\000\140\000\
\139\000\143\000\144\000\029\000\029\000\141\000\029\000\145\000\
\133\000\146\000\062\000\066\000\028\000\136\000\028\000\028\000\
\028\000\028\000\147\000\156\000\028\000\028\000\148\000\149\000\
\028\000\150\000\155\000\159\000\028\000\166\000\167\000\168\000\
\170\000\169\000\171\000\174\000\151\000\152\000\153\000\154\000\
\028\000\172\000\176\000\028\000\028\000\028\000\028\000\070\000\
\019\000\072\000\158\000\053\000\173\000\161\000\162\000\163\000\
\164\000\165\000\028\000\021\000\021\000\028\000\028\000\107\000\
\142\000\028\000\117\000\028\000\157\000\177\000\028\000\160\000\
\135\000\028\000\028\000\028\000\028\000\028\000\134\000\175\000\
\070\000\049\000\028\000\049\000\049\000\049\000\049\000\000\000\
\000\000\049\000\000\000\000\000\000\000\049\000\000\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\000\000\000\000\049\000\
\061\000\061\000\049\000\000\000\000\000\061\000\049\000\000\000\
\049\000\000\000\000\000\049\000\061\000\000\000\049\000\049\000\
\049\000\000\000\049\000\000\000\000\000\000\000\000\000\049\000\
\061\000\000\000\000\000\061\000\061\000\061\000\061\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\061\000\005\000\006\000\
\000\000\007\000\000\000\061\000\008\000\009\000\061\000\010\000\
\011\000\061\000\012\000\000\000\013\000\061\000\014\000\015\000\
\016\000\000\000\017\000\018\000\019\000\020\000\021\000\000\000\
\022\000\023\000\024\000\025\000\026\000\041\000\000\000\041\000\
\041\000\041\000\041\000\000\000\000\000\041\000\000\000\000\000\
\000\000\041\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\028\000\000\000\000\000\029\000\000\000\000\000\030\000\
\000\000\041\000\000\000\000\000\041\000\041\000\041\000\041\000\
\000\000\000\000\000\000\000\000\000\000\043\000\000\000\043\000\
\043\000\043\000\043\000\041\000\000\000\043\000\000\000\000\000\
\000\000\043\000\041\000\000\000\041\000\043\000\000\000\041\000\
\000\000\000\000\041\000\041\000\041\000\000\000\041\000\000\000\
\000\000\043\000\000\000\041\000\043\000\043\000\043\000\043\000\
\000\000\000\000\000\000\000\000\000\000\045\000\000\000\045\000\
\045\000\045\000\045\000\043\000\000\000\045\000\000\000\000\000\
\000\000\045\000\043\000\000\000\043\000\045\000\000\000\043\000\
\000\000\000\000\043\000\043\000\043\000\000\000\043\000\000\000\
\000\000\045\000\000\000\043\000\045\000\045\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\046\000\
\046\000\046\000\046\000\045\000\000\000\046\000\000\000\000\000\
\000\000\046\000\045\000\000\000\045\000\046\000\000\000\045\000\
\000\000\000\000\045\000\045\000\045\000\000\000\045\000\000\000\
\000\000\046\000\000\000\045\000\046\000\046\000\046\000\046\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\047\000\
\047\000\047\000\047\000\046\000\000\000\047\000\000\000\000\000\
\000\000\047\000\046\000\000\000\046\000\047\000\000\000\046\000\
\000\000\000\000\046\000\046\000\046\000\000\000\046\000\000\000\
\000\000\047\000\000\000\046\000\047\000\047\000\047\000\047\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\042\000\
\042\000\042\000\042\000\047\000\000\000\042\000\000\000\000\000\
\000\000\042\000\047\000\000\000\047\000\042\000\000\000\047\000\
\000\000\000\000\047\000\047\000\047\000\000\000\047\000\000\000\
\000\000\042\000\000\000\047\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\044\000\
\044\000\044\000\044\000\042\000\000\000\044\000\000\000\000\000\
\000\000\044\000\042\000\000\000\042\000\044\000\000\000\042\000\
\000\000\000\000\042\000\042\000\042\000\000\000\042\000\000\000\
\000\000\044\000\000\000\042\000\044\000\044\000\044\000\044\000\
\067\000\067\000\000\000\000\000\000\000\000\000\067\000\000\000\
\000\000\000\000\067\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\000\000\044\000\000\000\000\000\044\000\
\000\000\000\000\044\000\044\000\044\000\000\000\044\000\000\000\
\000\000\000\000\061\000\044\000\000\000\000\000\061\000\061\000\
\000\000\000\000\000\000\061\000\067\000\000\000\000\000\000\000\
\000\000\000\000\061\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\067\000\061\000\067\000\
\000\000\061\000\061\000\061\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\000\000\061\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\061\000\003\000\004\000\061\000\
\061\000\005\000\006\000\000\000\007\000\000\000\000\000\008\000\
\009\000\000\000\010\000\011\000\000\000\012\000\000\000\013\000\
\000\000\014\000\015\000\016\000\000\000\017\000\018\000\019\000\
\020\000\021\000\000\000\000\000\039\000\024\000\025\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\004\000\000\000\000\000\005\000\
\006\000\000\000\007\000\000\000\028\000\008\000\009\000\029\000\
\010\000\011\000\030\000\012\000\000\000\013\000\000\000\014\000\
\015\000\016\000\000\000\017\000\018\000\019\000\020\000\021\000\
\000\000\000\000\061\000\024\000\025\000\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
\000\000\000\000\000\000\005\000\006\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\010\000\029\000\000\000\012\000\
\030\000\013\000\003\000\014\000\015\000\016\000\005\000\006\000\
\000\000\000\000\000\000\021\000\000\000\000\000\039\000\024\000\
\025\000\026\000\012\000\000\000\000\000\003\000\000\000\000\000\
\000\000\005\000\006\000\000\000\000\000\000\000\021\000\000\000\
\000\000\039\000\024\000\025\000\026\000\012\000\028\000\000\000\
\000\000\029\000\000\000\000\000\030\000\000\000\000\000\000\000\
\000\000\021\000\000\000\071\000\039\000\024\000\025\000\026\000\
\000\000\028\000\000\000\000\000\029\000\073\000\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\000\000\074\000\000\000\
\075\000\000\000\076\000\000\000\028\000\000\000\077\000\029\000\
\073\000\000\000\030\000\000\000\078\000\079\000\111\000\000\000\
\000\000\074\000\000\000\075\000\000\000\076\000\000\000\000\000\
\000\000\077\000\000\000\000\000\000\000\000\000\000\000\078\000\
\079\000\000\000\000\000\000\000\000\000\000\000\080\000\000\000\
\000\000\081\000\000\000\000\000\082\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\080\000\000\000\000\000\081\000\000\000\000\000\082\000"

let yycheck = "\004\000\
\000\000\010\000\007\000\055\001\013\000\014\000\015\000\016\000\
\038\000\004\001\005\001\001\000\064\001\044\001\033\001\010\001\
\061\001\033\001\033\001\014\001\060\001\052\001\060\001\028\000\
\029\000\034\000\056\000\060\001\058\000\033\001\034\001\004\001\
\005\001\060\001\052\001\033\001\011\001\010\001\067\001\048\000\
\051\001\014\001\072\000\004\001\010\001\044\001\052\001\052\000\
\053\000\054\000\055\000\081\000\071\001\048\001\059\000\071\001\
\044\001\044\001\088\000\089\000\055\001\052\001\092\000\052\001\
\064\001\048\001\067\001\052\001\065\001\064\001\065\001\039\001\
\067\001\066\001\048\001\048\001\048\001\072\001\048\001\063\001\
\044\001\086\000\055\001\048\001\064\001\090\000\091\000\065\001\
\048\001\005\001\033\001\064\001\065\001\055\001\067\001\072\001\
\101\000\051\001\103\000\104\000\002\001\106\000\004\001\005\001\
\006\001\007\001\051\001\137\000\010\001\011\001\014\001\014\001\
\014\001\052\001\055\001\052\001\018\001\065\001\065\001\065\001\
\011\001\065\001\033\001\055\001\129\000\130\000\131\000\132\000\
\030\001\014\001\050\001\033\001\034\001\035\001\036\001\064\001\
\067\001\064\001\143\000\065\001\170\000\146\000\147\000\148\000\
\149\000\150\000\048\001\064\001\055\001\051\001\052\001\069\000\
\119\000\055\001\082\000\057\001\139\000\176\000\060\001\145\000\
\104\000\063\001\064\001\065\001\066\001\067\001\103\000\172\000\
\177\000\002\001\072\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\255\255\255\255\255\255\014\001\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\255\255\048\001\
\006\001\007\001\051\001\255\255\255\255\011\001\055\001\255\255\
\057\001\255\255\255\255\060\001\018\001\255\255\063\001\064\001\
\065\001\255\255\067\001\255\255\255\255\255\255\255\255\072\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\051\001\006\001\007\001\
\255\255\009\001\255\255\057\001\012\001\013\001\060\001\015\001\
\016\001\063\001\018\001\255\255\020\001\067\001\022\001\023\001\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\002\001\255\255\004\001\
\005\001\006\001\007\001\255\255\255\255\010\001\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\057\001\255\255\255\255\060\001\255\255\255\255\063\001\
\255\255\030\001\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\006\001\007\001\048\001\255\255\010\001\255\255\255\255\
\255\255\014\001\055\001\255\255\057\001\018\001\255\255\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\255\255\030\001\255\255\072\001\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\006\001\007\001\048\001\255\255\010\001\255\255\255\255\
\255\255\014\001\055\001\255\255\057\001\018\001\255\255\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\255\255\030\001\255\255\072\001\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\006\001\007\001\048\001\255\255\010\001\255\255\255\255\
\255\255\014\001\055\001\255\255\057\001\018\001\255\255\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\255\255\030\001\255\255\072\001\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\006\001\007\001\048\001\255\255\010\001\255\255\255\255\
\255\255\014\001\055\001\255\255\057\001\018\001\255\255\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\255\255\030\001\255\255\072\001\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\006\001\007\001\048\001\255\255\010\001\255\255\255\255\
\255\255\014\001\055\001\255\255\057\001\018\001\255\255\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\255\255\030\001\255\255\072\001\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\006\001\007\001\048\001\255\255\010\001\255\255\255\255\
\255\255\014\001\055\001\255\255\057\001\018\001\255\255\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\255\255\030\001\255\255\072\001\033\001\034\001\035\001\036\001\
\004\001\005\001\255\255\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\014\001\048\001\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\255\255\057\001\255\255\255\255\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\067\001\255\255\
\255\255\255\255\002\001\072\001\255\255\255\255\006\001\007\001\
\255\255\255\255\255\255\011\001\048\001\255\255\255\255\255\255\
\255\255\255\255\018\001\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\064\001\065\001\030\001\067\001\
\255\255\033\001\034\001\035\001\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\048\001\255\255\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\057\001\255\255\255\255\060\001\002\001\003\001\063\001\
\064\001\006\001\007\001\255\255\009\001\255\255\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\255\255\020\001\
\255\255\022\001\023\001\024\001\255\255\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\255\255\255\255\006\001\
\007\001\255\255\009\001\255\255\057\001\012\001\013\001\060\001\
\015\001\016\001\063\001\018\001\255\255\020\001\255\255\022\001\
\023\001\024\001\255\255\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\034\001\035\001\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\057\001\255\255\015\001\060\001\255\255\018\001\
\063\001\020\001\002\001\022\001\023\001\024\001\006\001\007\001\
\255\255\255\255\255\255\030\001\255\255\255\255\033\001\034\001\
\035\001\036\001\018\001\255\255\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\255\255\255\255\255\255\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\018\001\057\001\255\255\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\030\001\255\255\051\001\033\001\034\001\035\001\036\001\
\255\255\057\001\255\255\255\255\060\001\008\001\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\255\255\021\001\255\255\057\001\255\255\025\001\060\001\
\008\001\255\255\063\001\255\255\031\001\032\001\033\001\255\255\
\255\255\017\001\255\255\019\001\255\255\021\001\255\255\255\255\
\255\255\025\001\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\057\001\255\255\255\255\060\001\255\255\255\255\063\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  CASE\000\
  OF\000\
  AS\000\
  LAMBDA\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  USTRING\000\
  UNIT\000\
  UUNIT\000\
  TIMESFLOAT\000\
  UFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  NAT\000\
  ISMEMBER\000\
  INTERSECTION\000\
  INSERT\000\
  SET\000\
  NIL\000\
  SETTYPE\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 132 "parser.mly"
      ( fun ctx -> [],ctx )
# 588 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 134 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 600 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 142 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 607 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 144 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 615 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 146 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 623 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 151 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 631 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 153 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 639 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 158 "parser.mly"
                ( _1 )
# 646 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 163 "parser.mly"
           ( _2 )
# 655 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 165 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 666 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 171 "parser.mly"
      ( fun ctx -> TyBool )
# 673 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 173 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 683 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 176 "parser.mly"
      ( fun ctx -> TyString )
# 690 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 178 "parser.mly"
      ( fun ctx -> TyUnit )
# 697 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 180 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 707 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 183 "parser.mly"
      ( fun ctx -> TyFloat )
# 714 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 185 "parser.mly"
      ( fun ctx -> TyNat )
# 721 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 187 "parser.mly"
      ( fun ctx -> TySettype )
# 728 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "parser.mly"
      ( fun ctx -> TyVarBind )
# 734 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 193 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 742 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parser.mly"
      ( fun ctx i -> [] )
# 748 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 199 "parser.mly"
      ( _1 )
# 755 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 203 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 762 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 205 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 771 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 209 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 780 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 211 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 787 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 217 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 796 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 219 "parser.mly"
     ( _1 )
# 803 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 223 "parser.mly"
      ( _1 )
# 810 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 225 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 822 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 227 "parser.mly"
      ( fun ctx -> TmSet(_1, _3 ctx, _5 ctx) )
# 834 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 229 "parser.mly"
      ( fun ctx -> TmIsMember(_1, _3 ctx, _5 ctx) )
# 846 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 231 "parser.mly"
      ( fun ctx -> TmIntersection(_1, _3 ctx, _5 ctx) )
# 858 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 233 "parser.mly"
      ( fun ctx -> TmInsert(_1, _3 ctx, _5 ctx) )
# 870 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 235 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 881 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 238 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 895 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 242 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 909 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 246 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 921 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 248 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 933 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 250 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 950 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 257 "parser.mly"
      ( _1 )
# 957 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 259 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 968 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 264 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 977 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 267 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 986 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 269 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 994 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 271 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1002 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 273 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1010 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 277 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1019 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 279 "parser.mly"
      ( _1 )
# 1026 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 283 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1036 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 286 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1046 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 289 "parser.mly"
      ( _1 )
# 1053 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 293 "parser.mly"
      ( _1 )
# 1060 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 295 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1070 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 301 "parser.mly"
      ( _2 )
# 1079 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 303 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1089 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 305 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1096 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 307 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1103 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 309 "parser.mly"
      ( fun ctx -> TmNil(_1) )
# 1110 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 311 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1124 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 314 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1132 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 317 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1139 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 319 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1146 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 321 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1156 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 324 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1163 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 326 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1174 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 334 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1181 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 336 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1190 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 340 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1205 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "parser.mly"
      ( fun ctx i -> [] )
# 1211 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 348 "parser.mly"
      ( _1 )
# 1218 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 352 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1225 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 354 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1234 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 358 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1243 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 360 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1250 "parser.ml"
               : 'Field))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
